SOLUTION 1:

class Solution:
    def trap(self, height: List[int]) -> int:

        if not height:
            return 0

        l,r = 0,len(height)-1
        leftMax,rightMax = height[l],height[r]
        res = 0

        while l<r:
            if leftMax < rightMax:
                l += 1
                leftMax = max(leftMax, height[l])
                res += leftMax - height[l]
            else: 
                r -= 1
                rightMax = max(rightMax,height[r])
                res += rightMax - height[r]
            
        return res

SOLUTION 2: BASED ON SAME CONCEPT. JUST DIFFERENT WAY OF DOING IT

class Solution:
    def trap(self, height: List[int]) -> int:

        res1 = [0]*len(height)
        l = 0
        ans = 0

        for i in range(1,len(height)-1):
            res1[i] = max(res1[i-1],height[i-1])


        for i in range(len(height)-2,-1,-1):
            l = max(l,height[i+1])
            res1[i] = min( res1[i],l) - height[i]
            if res1[i] < 0:
                res1[i] = 0
            ans += res1[i]

        return ans
